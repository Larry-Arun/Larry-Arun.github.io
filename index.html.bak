<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><meta name="X-UA-Compatible" content="IE=edge"><title> Mia</title><meta name="description" content="mia"><meta name="viewport" content="width=device-width, initial-scale=1"><link rel="short icon" href="/favicon.png"><link rel="stylesheet" href="/css/apollo.css"><link rel="stylesheet" href="http://fonts.useso.com/css?family=Source+Sans+Pro:400,600" type="text/css"></head><body><div class="wrap"><header><a href="/" class="logo-link"><img src="/favicon.png"></a><ul class="nav nav-list"><li class="nav-list-item"><a href="/" target="_self" class="nav-list-link active">BLOG</a></li><li class="nav-list-item"><a href="/archives/" target="_self" class="nav-list-link">ARCHIVE</a></li><li class="nav-list-item"><a href="https://github.com/iridescentmia" target="_blank" class="nav-list-link">GITHUB</a></li><li class="nav-list-item"><a href="https://iridescentmia.github.io/resume/" target="_blank" class="nav-list-link">RESUME</a></li><li class="nav-list-item"><a href="/atom.xml" target="_self" class="nav-list-link">RSS</a></li></ul></header><section class="container"><ul class="home post-list"><li class="post-list-item"><article class="post-block"><h2 class="post-title"><a href="/2016/07/03/一个Flex布局的实例/" class="post-title-link">一个Flex布局的实例</a></h2><div class="post-info">Jul 3, 2016</div><div class="post-content"><p>Flex布局是一种更有效，更灵活布局方式，主要思想就是赋予容器（container）改变内部子项目（items）的宽度、高度或次序，通过子项目的扩展/收缩，以达到最好的利用可用空间的目的。</p>
<p>Flex还有一个更重要的特点，它是无方向性的（block是垂直向布局，inline是水平向布局），也因而更灵活。</p></div><a href="/2016/07/03/一个Flex布局的实例/" class="read-more">...more</a></article></li><li class="post-list-item"><article class="post-block"><h2 class="post-title"><a href="/2016/06/20/SHSubway项目笔记4-mongoDB-JavaScript/" class="post-title-link">SHSubway项目笔记4-mongoDB+JavaScript</a></h2><div class="post-info">Jun 20, 2016</div><div class="post-content"><p>目录结构</p>
<ul>
<li>1.mongoDB执行js脚本</li>
<li>2.mongoDB大量删除数据空间释放问题</li>
<li>3.JavaScript中深复制和浅复制</li>
</ul></div><a href="/2016/06/20/SHSubway项目笔记4-mongoDB-JavaScript/" class="read-more">...more</a></article></li><li class="post-list-item"><article class="post-block"><h2 class="post-title"><a href="/2016/06/16/小tips-CSS篇1/" class="post-title-link">小tips-CSS篇1</a></h2><div class="post-info">Jun 16, 2016</div><div class="post-content"><h3 id="1-block-vs-inline-vs-inline-block"><a href="#1-block-vs-inline-vs-inline-block" class="headerlink" title="1.block vs inline vs inline-block"></a><strong>1.block vs inline vs inline-block</strong></h3><p>常用的inline元素有：a span img input br select small strong等</p>
<p>常用的block元素有：div p h1-h6 form table ul ol等</p></div><a href="/2016/06/16/小tips-CSS篇1/" class="read-more">...more</a></article></li><li class="post-list-item"><article class="post-block"><h2 class="post-title"><a href="/2016/05/27/SHSubway项目笔记3-D3-LeafLet绘图/" class="post-title-link">SHSubway项目笔记3-D3+LeafLet绘图</a></h2><div class="post-info">May 27, 2016</div><div class="post-content"><p>最近又把之前读的论文找出来重读，寄希望在反复阅读中能找到灵感，这个过程有点难过，就像刚刚接触一样东西，盲人摸象一样，好像知道它大概是个什么，又深觉不得要领。</p>
<p>而读论文又不像写代码，可以明确的知道写了多少行，做了什么效果。成果很难衡量，所以最近常常苦恼。</p>
<p>下面继续整理最近解决的问题，结构目录如下：</p>
<ul>
<li>1.在leaflet绘制的地图上，用D3添加元素</li>
<li>2.JavaScript的Date对象，加上一段时间</li>
<li>3.line chart的转折点的光滑处理</li>
<li>4.D3坐标轴样式</li>
</ul></div><a href="/2016/05/27/SHSubway项目笔记3-D3-LeafLet绘图/" class="read-more">...more</a></article></li><li class="post-list-item"><article class="post-block"><h2 class="post-title"><a href="/2016/05/20/SHSubway项目笔记2-mongoDB-node-js边用边学/" class="post-title-link">SHSubway项目笔记2-mongoDB+node.js边用边学</a></h2><div class="post-info">May 20, 2016</div><div class="post-content"><p>从五一假期回来到今天5月20号，从node.js和mongoDB的小白，到现在基本完成了第一步的目标。截图留念。</p>
<p><img src="http://o77yvgv4e.bkt.clouddn.com/0520.png" alt=""></p></div><a href="/2016/05/20/SHSubway项目笔记2-mongoDB-node-js边用边学/" class="read-more">...more</a></article></li><li class="post-list-item"><article class="post-block"><h2 class="post-title"><a href="/2016/05/17/SHSubway项目笔记-mongoDB-node-js边用边学/" class="post-title-link">SHSubway项目笔记-mongoDB+node.js边用边学</a></h2><div class="post-info">May 17, 2016</div><div class="post-content"><p>最近在用mongoDB搭建可视化系统的数据库，记录一下使用过程中解决的问题</p>
<p>目录结构：</p>
<ul>
<li>1.将csv文件导入到mongoDB</li>
<li>2.使用mongoose建Model时，集合名称自动加s变复数的问题</li>
<li>3.mongoDB数据库中将时间从字符串格式转换成Date日期格式</li>
<li>4.循环集合更新文档中的某些字段**</li>
<li>5.node.js+mongoDB教程**</li>
</ul></div><a href="/2016/05/17/SHSubway项目笔记-mongoDB-node-js边用边学/" class="read-more">...more</a></article></li><li class="post-list-item"><article class="post-block"><h2 class="post-title"><a href="/2016/05/15/Cookie简介及相关操作/" class="post-title-link">Cookie简介及相关操作</a></h2><div class="post-info">May 15, 2016</div><div class="post-content"><p>今天来介绍下Cookie的相关知识及操作，包括设置Cookie的设置，读取和删除等。</p>
<blockquote>
<p><a href="http://blog.csdn.net/fangaoxin/article/details/6952954"><strong>什么是Cookie</strong></a><br>由于HTTP是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办呢？就<strong>给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样服务器就能从通行证上确认客户身份了。这就是Cookie的工作原理</strong>。<br>Cookie实际上是一小段的文本信息。客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。服务器还可以根据需要修改Cookie的内容。</p>
</blockquote></div><a href="/2016/05/15/Cookie简介及相关操作/" class="read-more">...more</a></article></li><li class="post-list-item"><article class="post-block"><h2 class="post-title"><a href="/2016/05/14/地图坐标体系介绍及其互转工具/" class="post-title-link">地图坐标体系介绍及其互转工具</a></h2><div class="post-info">May 14, 2016</div><div class="post-content"><p>今天在用leaflet的时候发现，手头数据的经纬度坐标是基于百度地图体系的，在leaflet中用openstreetmap会有很大的偏移，解决了偏移问题，顺便了解了一下不同地图使用的坐标体系，整理如下：</p>
<p>先说一说现有的坐标体系：</p></div><a href="/2016/05/14/地图坐标体系介绍及其互转工具/" class="read-more">...more</a></article></li><li class="post-list-item"><article class="post-block"><h2 class="post-title"><a href="/2016/05/08/JavaScript中的正则表达式/" class="post-title-link">JavaScript中的正则表达式</a></h2><div class="post-info">May 8, 2016</div><div class="post-content"><p>最近一直用到正则表达式，今天跟着教程系统学习了一下，整理笔记如下：</p>
<h3 id="1-字符串操作函数"><a href="#1-字符串操作函数" class="headerlink" title="1.字符串操作函数"></a><strong>1.字符串操作函数</strong></h3><ul>
<li>search</li>
<li>substring</li>
<li>charAt</li>
<li>split</li>
</ul>
<p><strong>1.1 search</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">'abcdef'</span>;</span><br><span class="line">alert(str.search(<span class="string">'b'</span>));<span class="comment">//1, 找到则返回所在位置</span></span><br></pre></td></tr></table></figure></div><a href="/2016/05/08/JavaScript中的正则表达式/" class="read-more">...more</a></article></li><li class="post-list-item"><article class="post-block"><h2 class="post-title"><a href="/2016/03/28/onclick/" class="post-title-link">addEventListener vs onclick</a></h2><div class="post-info">Mar 28, 2016</div><div class="post-content"><p>今天来说一说addEventListener来添加事件和直接添加的区别，下面用“onclick”事件作说明。</p>
<p>形式1：element.onclick = function () { }; //等价于内联的事件<br>形式2：element.addEventListener(‘click’, function () { } , false); //最后一个参数控制冒泡事件，为false则阻止事件冒泡。</p></div><a href="/2016/03/28/onclick/" class="read-more">...more</a></article></li></ul></section><footer><div class="paginator"><a href="/page/2/" class="next">NEXT</a></div><div class="copyright"><p>© 2015 - 2016 <a href="http://yoursite.com">Mia Wang</a></p></div></footer></div><script async src="//cdn.bootcss.com/mathjax/2.6.1/MathJax.js?config=TeX-MML-AM_CHTML"></script><script>(function(b,o,i,l,e,r){b.GoogleAnalyticsObject=l;b[l]||(b[l]=function(){(b[l].q=b[l].q||[]).push(arguments)});b[l].l=+new Date;e=o.createElement(i);r=o.getElementsByTagName(i)[0];e.src='//www.google-analytics.com/analytics.js';r.parentNode.insertBefore(e,r)}(window,document,'script','ga'));ga('create',"UA-65933410-1",'auto');ga('send','pageview');</script></body></html>